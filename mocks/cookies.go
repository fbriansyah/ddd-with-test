// Code generated by MockGen. DO NOT EDIT.
// Source: ../cookies.go
//
// Generated by this command:
//
//	mockgen -source=../cookies.go -destination=../mocks/cookies.go -package=mocks CookieStockChecker,CardCharger,EmailSender
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEmailSender is a mock of EmailSender interface.
type MockEmailSender struct {
	ctrl     *gomock.Controller
	recorder *MockEmailSenderMockRecorder
}

// MockEmailSenderMockRecorder is the mock recorder for MockEmailSender.
type MockEmailSenderMockRecorder struct {
	mock *MockEmailSender
}

// NewMockEmailSender creates a new mock instance.
func NewMockEmailSender(ctrl *gomock.Controller) *MockEmailSender {
	mock := &MockEmailSender{ctrl: ctrl}
	mock.recorder = &MockEmailSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailSender) EXPECT() *MockEmailSenderMockRecorder {
	return m.recorder
}

// SendEmailReceipt mocks base method.
func (m *MockEmailSender) SendEmailReceipt(ctx context.Context, emailAddress string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmailReceipt", ctx, emailAddress)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmailReceipt indicates an expected call of SendEmailReceipt.
func (mr *MockEmailSenderMockRecorder) SendEmailReceipt(ctx, emailAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmailReceipt", reflect.TypeOf((*MockEmailSender)(nil).SendEmailReceipt), ctx, emailAddress)
}

// MockCardCharger is a mock of CardCharger interface.
type MockCardCharger struct {
	ctrl     *gomock.Controller
	recorder *MockCardChargerMockRecorder
}

// MockCardChargerMockRecorder is the mock recorder for MockCardCharger.
type MockCardChargerMockRecorder struct {
	mock *MockCardCharger
}

// NewMockCardCharger creates a new mock instance.
func NewMockCardCharger(ctrl *gomock.Controller) *MockCardCharger {
	mock := &MockCardCharger{ctrl: ctrl}
	mock.recorder = &MockCardChargerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCardCharger) EXPECT() *MockCardChargerMockRecorder {
	return m.recorder
}

// ChargeCard mocks base method.
func (m *MockCardCharger) ChargeCard(ctx context.Context, cardToken string, amountInCents int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChargeCard", ctx, cardToken, amountInCents)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChargeCard indicates an expected call of ChargeCard.
func (mr *MockCardChargerMockRecorder) ChargeCard(ctx, cardToken, amountInCents any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChargeCard", reflect.TypeOf((*MockCardCharger)(nil).ChargeCard), ctx, cardToken, amountInCents)
}

// MockCookieStockChecker is a mock of CookieStockChecker interface.
type MockCookieStockChecker struct {
	ctrl     *gomock.Controller
	recorder *MockCookieStockCheckerMockRecorder
}

// MockCookieStockCheckerMockRecorder is the mock recorder for MockCookieStockChecker.
type MockCookieStockCheckerMockRecorder struct {
	mock *MockCookieStockChecker
}

// NewMockCookieStockChecker creates a new mock instance.
func NewMockCookieStockChecker(ctrl *gomock.Controller) *MockCookieStockChecker {
	mock := &MockCookieStockChecker{ctrl: ctrl}
	mock.recorder = &MockCookieStockCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCookieStockChecker) EXPECT() *MockCookieStockCheckerMockRecorder {
	return m.recorder
}

// AmountInStock mocks base method.
func (m *MockCookieStockChecker) AmountInStock(ctx context.Context) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AmountInStock", ctx)
	ret0, _ := ret[0].(int)
	return ret0
}

// AmountInStock indicates an expected call of AmountInStock.
func (mr *MockCookieStockCheckerMockRecorder) AmountInStock(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AmountInStock", reflect.TypeOf((*MockCookieStockChecker)(nil).AmountInStock), ctx)
}
